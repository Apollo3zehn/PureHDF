<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<# 
	using var webClient = new WebClient();

    var url1 = "https://raw.githubusercontent.com/Blosc/c-blosc2/42ec0a71e30efcc2cd2b014564f7f5cad945e52f/blosc/shuffle-avx2.c";
    var csstring = webClient.DownloadString(url1); 
    
    var url2 = "https://raw.githubusercontent.com/Blosc/c-blosc2/42ec0a71e30efcc2cd2b014564f7f5cad945e52f/LICENSE.txt";
    var license = webClient.DownloadString(url2);

    // methods
    csstring = Regex.Replace(csstring, @"static inline __m256i\n__attribute__\(\(__always_inline__\)\)", "[MethodImpl(MethodImplOptions.AggressiveInlining)]\n static unsafe Vector256<byte>", RegexOptions.Singleline);
    csstring = Regex.Replace(csstring, @"static inline void\n__attribute__\(\(__always_inline__\)\)", "[MethodImpl(MethodImplOptions.AggressiveInlining)]\n static void", RegexOptions.Singleline);
    csstring = Regex.Replace(csstring, @"unshuffle_generic_inline", "ShuffleGeneric.unshuffle_avx2");
    csstring = Regex.Replace(csstring, @"shuffle_generic_inline", "ShuffleGeneric.shuffle_avx2");
    csstring = Regex.Replace(csstring, @"unshuffle_generic\(bytesoftype", "ShuffleGeneric.unshuffle_avx2(bytesoftype, 0");
    csstring = Regex.Replace(csstring, @"shuffle_generic\(bytesoftype", "ShuffleGeneric.shuffle_avx2(bytesoftype, 0");
    csstring = Regex.Replace(csstring, @"(default:.*?}.*?})", m => $"{m.Groups[0].Value}\n      break;", RegexOptions.Singleline);
    csstring = Regex.Replace(csstring, @"lldiv_t vecs_per_el = lldiv\(bytesoftype, sizeof\(__m128i\)\);", "var remainder = bytesoftype % sizeof(Vector128<byte>);");
    csstring = Regex.Replace(csstring, @"\(int32_t\)vecs_per_el\.rem;", "remainder;");

    // decorations and type definitions
    csstring = Regex.Replace(csstring, @"#.*", "");
    csstring = Regex.Replace(csstring, @"static void\n", "private static unsafe void ");
    csstring = Regex.Replace(csstring, @"void\n", "private static unsafe void ");
    csstring = Regex.Replace(csstring, @"static const int32_t", "int");
    csstring = Regex.Replace(csstring, @"const\s", "");
    csstring = Regex.Replace(csstring, @"const\s", "");
    csstring = Regex.Replace(csstring, @"int32_t", "int");
    csstring = Regex.Replace(csstring, @"uint8_t\*", "byte*");
    csstring = Regex.Replace(csstring, @"uint8_t \*", "byte *");
    csstring = Regex.Replace(csstring, @"inline ", "");
    csstring = Regex.Replace(csstring, @"static ulong", "ulong");
    csstring = Regex.Replace(csstring, @"sizeof\(__m128i\)", "sizeof(Vector128<byte>)");
    csstring = Regex.Replace(csstring, @"sizeof\(__m256i\)", "sizeof(Vector256<byte>)");
    csstring = Regex.Replace(csstring, @", __m256i", ", Vector256<byte>");
    csstring = Regex.Replace(csstring, @"__m256i\s", "var ");
    csstring = Regex.Replace(csstring, @"__m128i\*", "byte*");
    csstring = Regex.Replace(csstring, @"\(__m128i\*\)", "");
    csstring = Regex.Replace(csstring, @"\(__m256i\*\)", "");
    csstring = Regex.Replace(csstring, @"var ymm0\[(.*)\], ymm1\[(.*)\];", m => $"var ymm0 = new Vector256<byte>[{m.Groups[1]}];\n  var ymm1 = new Vector256<byte>[{m.Groups[1]}];");
    csstring = Regex.Replace(csstring, @"\+= sizeof\(Vector256<byte>\)", "+= sizeof(Vector256<byte>)");
    csstring = Regex.Replace(csstring, @"\* sizeof\(Vector256<byte>\)", "* sizeof(Vector256<byte>)");

    // intrinsics (128)
    csstring = Regex.Replace(csstring, @"_mm_loadu_si128", "Sse2.LoadVector128");
    csstring = Regex.Replace(csstring, @"_mm_storeu_si128", "Sse2.Store");

    // intrinsics (cast)
    csstring = Regex.Replace(csstring, @"_mm256_inserti128_si256", "Avx2.InsertVector128");
    csstring = Regex.Replace(csstring, @"_mm256_extracti128_si256", "Avx2.ExtractVector128");

    csstring = Regex.Replace(csstring, @"_mm256_castsi128_si256\((.*?)\)\)", m => $"{m.Groups[1]}).ToVector256()");
    csstring = Regex.Replace(csstring, @"_mm256_castsi256_si128\((.*?)\)\)", m => $"{m.Groups[1]}.GetLower())");

    // intrinsics (256)
    csstring = Regex.Replace(csstring, @"_mm256_set_epi8\(", "Vector256.Create((byte)");
    csstring = Regex.Replace(csstring, @"_mm256_set_epi32\(", "Vector256.Create((int)");
    csstring = Regex.Replace(csstring, @"_mm256_loadu_si256", "Avx.LoadVector256");
    csstring = Regex.Replace(csstring, @"_mm256_storeu_si256", "Avx2.Store");
    csstring = Regex.Replace(csstring, @"_mm256_shuffle_epi8", "Avx2.Shuffle");
    csstring = Regex.Replace(csstring, @"_mm256_shuffle_epi32\((.*?), (.*?)\)", m => $"Avx2.Shuffle({m.Groups[1]}.AsInt32(), {m.Groups[2]}).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_blend_epi32\((.*?), (.*?), (.*?)\)", m => $"Avx2.Blend({m.Groups[1]}.AsInt32(), {m.Groups[2]}.AsInt32(), {m.Groups[3]}).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_permute4x64_epi64\((.*?), (.*?)\)", m => $"Avx2.Permute4x64({m.Groups[1]}.AsInt64(), {m.Groups[2]}).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_permutevar8x32_epi32\((.*?), (.*?)\)", m => $"Avx2.PermuteVar8x32({m.Groups[1]}.AsInt32(), {m.Groups[2]}).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_permute2x128_si256", "Avx2.Permute2x128");
    
    csstring = Regex.Replace(csstring, @"_mm256_unpacklo_epi8", "Avx2.UnpackLow");
    csstring = Regex.Replace(csstring, @"_mm256_unpacklo_epi16\((.*?), (.*?)\)", m => $"Avx2.UnpackLow({m.Groups[1]}.AsInt16(), {m.Groups[2]}.AsInt16()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_unpacklo_epi32\((.*?), (.*?)\)", m => $"Avx2.UnpackLow({m.Groups[1]}.AsInt32(), {m.Groups[2]}.AsInt32()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_unpacklo_epi64\((.*?), (.*?)\)", m => $"Avx2.UnpackLow({m.Groups[1]}.AsInt64(), {m.Groups[2]}.AsInt64()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_unpackhi_epi8", "Avx2.UnpackHigh");
    csstring = Regex.Replace(csstring, @"_mm256_unpackhi_epi16\((.*?), (.*?)\)", m => $"Avx2.UnpackHigh({m.Groups[1]}.AsInt16(), {m.Groups[2]}.AsInt16()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_unpackhi_epi32\((.*?), (.*?)\)", m => $"Avx2.UnpackHigh({m.Groups[1]}.AsInt32(), {m.Groups[2]}.AsInt32()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm256_unpackhi_epi64\((.*?), (.*?)\)", m => $"Avx2.UnpackHigh({m.Groups[1]}.AsInt64(), {m.Groups[2]}.AsInt64()).AsByte()");

    // reverse parameters
    csstring = csstring.Replace("0x0f, 0x0d, 0x0b, 0x09, 0x07, 0x05, 0x03, 0x01", "0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e");
    csstring = csstring.Replace("0x0e, 0x0c, 0x0a, 0x08, 0x06, 0x04, 0x02, 0x00", "0x01, 0x03, 0x05, 0x07, 0x09, 0x0b, 0x0d, 0x0f");

    csstring = csstring.Replace("0x07, 0x03, 0x06, 0x02, 0x05, 0x01, 0x04, 0x00", "0x00, 0x04, 0x01, 0x05, 0x02, 0x06, 0x03, 0x07");

    // remove unnecessary blocks
    csstring = Regex.Replace(csstring, @"/\*.*?Author.*?\\*}", "", RegexOptions.Singleline);
    csstring = Regex.Replace(csstring, @"/\* The next is useful for debugging purposes \*/.*?}", "", RegexOptions.Singleline);
    
    // line breaks
    csstring = Regex.Replace(csstring, @"(\n){3,}", "\n\n");
    csstring += "\n";

    // spaces
    csstring = Regex.Replace(csstring, @"\n", "\n        ");
#>
/* 
This is automatically translated code from https://github.com/Blosc/c-blosc2

<# Write(license); #> 
*/

using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace PureHDF.Filters;

internal static class ShuffleAvx2
{
    public static unsafe void Shuffle(int bytesOfType, Span<byte> source, Span<byte> destination)
    {
        fixed (byte* src = source, dest = destination)
        {
            shuffle_avx2(bytesOfType, source.Length, src, dest);
        }
    }

    public static unsafe void Unshuffle(int bytesOfType, Span<byte> source, Span<byte> destination)
    {
        fixed (byte* src = source, dest = destination)
        {
            unshuffle_avx2(bytesOfType, source.Length, src, dest);
        }
    }

    <# Write(csstring); #>
}