<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<# 
	using var webClient = new WebClient();

    var url1 = "https://raw.githubusercontent.com/Blosc/c-blosc2/master/blosc/shuffle-sse2.c";
    var csstring = webClient.DownloadString(url1); 
    
    var url2 = "https://raw.githubusercontent.com/Blosc/c-blosc2/master/LICENSES/BLOSC.txt";
    var license = webClient.DownloadString(url2);

    // methods
    csstring = Regex.Replace(csstring, @"unshuffle_generic_inline", "ShuffleGeneric.unshuffle_avx2");
    csstring = Regex.Replace(csstring, @"shuffle_generic_inline", "ShuffleGeneric.shuffle_avx2");
    csstring = Regex.Replace(csstring, @"unshuffle_generic\(bytesoftype", "ShuffleGeneric.unshuffle_avx2(bytesoftype, 0");
    csstring = Regex.Replace(csstring, @"shuffle_generic\(bytesoftype", "ShuffleGeneric.shuffle_avx2(bytesoftype, 0");
    csstring = Regex.Replace(csstring, @"(default:.*?}.*?})", m => $"{m.Groups[0].Value}\n      break;", RegexOptions.Singleline);
    csstring = Regex.Replace(csstring, @"lldiv_t vecs_per_el = lldiv\(bytesoftype, sizeof\(__m128i\)\);", "var remainder = bytesoftype % sizeof(Vector128<byte>);");
    csstring = Regex.Replace(csstring, @"\(int32_t\)vecs_per_el\.rem;", "remainder;");

    // decorations and type definitions
    csstring = Regex.Replace(csstring, @"#.*", "");
    csstring = Regex.Replace(csstring, @"static void\n", "private static unsafe void ");
    csstring = Regex.Replace(csstring, @"void\n", "private static unsafe void ");
    csstring = Regex.Replace(csstring, @"static const int32_t", "int");
    csstring = Regex.Replace(csstring, @"const\s", "");
    csstring = Regex.Replace(csstring, @"const\s", "");
    csstring = Regex.Replace(csstring, @"int32_t", "int");
    csstring = Regex.Replace(csstring, @"uint8_t\*", "byte*");
    csstring = Regex.Replace(csstring, @"uint8_t \*", "byte *");
    csstring = Regex.Replace(csstring, @"inline ", "");
    csstring = Regex.Replace(csstring, @"static ulong", "ulong");
    csstring = Regex.Replace(csstring, @"sizeof\(__m128i\)", "sizeof(Vector128<byte>)");
    csstring = Regex.Replace(csstring, @", __m128i", ", Vector128<byte>");
    csstring = Regex.Replace(csstring, @"__m128i\s", "var ");
    csstring = Regex.Replace(csstring, @"__m128i\*", "byte*");
    csstring = Regex.Replace(csstring, @"\(__m128i\*\)", "");
    csstring = Regex.Replace(csstring, @"var xmm0\[(.*)\], xmm1\[(.*)\];", m => $"var xmm0 = new Vector128<byte>[{m.Groups[1]}];\n  var xmm1 = new Vector128<byte>[{m.Groups[1]}];");
    csstring = Regex.Replace(csstring, @"var xmm1\[(.*)\], xmm2\[(.*)\];", m => $"var xmm1 = new Vector128<byte>[{m.Groups[1]}];\n  var xmm2 = new Vector128<byte>[{m.Groups[1]}];");
    csstring = Regex.Replace(csstring, @"\+= sizeof\(Vector128<byte>\)", "+= sizeof(Vector128<byte>)");
    csstring = Regex.Replace(csstring, @"\* sizeof\(Vector128<byte>\)", "* sizeof(Vector128<byte>)");
    
    // intrinsics
    csstring = Regex.Replace(csstring, @"_mm_loadu_si128", "Sse2.LoadVector128");
    csstring = Regex.Replace(csstring, @"_mm_storeu_si128", "Sse2.Store");
    csstring = Regex.Replace(csstring, @"_mm_shuffle_epi32\((.*?), (.*?)\)", m => $"Sse2.Shuffle({m.Groups[1]}.AsInt32(), {m.Groups[2]}).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_shufflelo_epi16\((.*?), (.*?)\)", m => $"Sse2.ShuffleLow({m.Groups[1]}.AsInt16(), {m.Groups[2]}).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_shufflehi_epi16\((.*?), (.*?)\)", m => $"Sse2.ShuffleHigh({m.Groups[1]}.AsInt16(), {m.Groups[2]}).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_unpacklo_epi8", "Sse2.UnpackLow");
    csstring = Regex.Replace(csstring, @"_mm_unpacklo_epi16\((.*?), (.*?)\)", m => $"Sse2.UnpackLow({m.Groups[1]}.AsInt16(), {m.Groups[2]}.AsInt16()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_unpacklo_epi32\((.*?), (.*?)\)", m => $"Sse2.UnpackLow({m.Groups[1]}.AsInt32(), {m.Groups[2]}.AsInt32()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_unpacklo_epi64\((.*?), (.*?)\)", m => $"Sse2.UnpackLow({m.Groups[1]}.AsInt64(), {m.Groups[2]}.AsInt64()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_unpackhi_epi8", "Sse2.UnpackHigh");
    csstring = Regex.Replace(csstring, @"_mm_unpackhi_epi32\((.*?), (.*?)\)", m => $"Sse2.UnpackHigh({m.Groups[1]}.AsInt32(), {m.Groups[2]}.AsInt32()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_unpackhi_epi16\((.*?), (.*?)\)", m => $"Sse2.UnpackHigh({m.Groups[1]}.AsInt16(), {m.Groups[2]}.AsInt16()).AsByte()");
    csstring = Regex.Replace(csstring, @"_mm_unpackhi_epi64\((.*?), (.*?)\)", m => $"Sse2.UnpackHigh({m.Groups[1]}.AsInt64(), {m.Groups[2]}.AsInt64()).AsByte()");
     
    // remove unnecessary blocks
    csstring = Regex.Replace(csstring, @"/\*.*?Author.*?\\*}", "", RegexOptions.Singleline);
    
    // line breaks
    csstring = Regex.Replace(csstring, @"(\n){3,}", "\n\n");
    csstring += "\n";

    // spaces
    csstring = Regex.Replace(csstring, @"\n", "\n        ");
#>
/* 
This is automatically translated code from https://github.com/Blosc/c-blosc2

<# Write(license); #> 
*/

using System;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace PureHDF.Filters;

public static class ShuffleSse2
{
    public static unsafe void Shuffle(int bytesOfType, Span<byte> source, Span<byte> destination)
    {
        fixed (byte* src = source, dest = destination)
        {
            ShuffleSse2.shuffle_sse2(bytesOfType, source.Length, src, dest);
        }
    }

    public static unsafe void Unshuffle(int bytesOfType, Span<byte> source, Span<byte> destination)
    {
        fixed (byte* src = source, dest = destination)
        {
            ShuffleSse2.unshuffle_sse2(bytesOfType, source.Length, src, dest);
        }
    }

    <# Write(csstring); #>
}